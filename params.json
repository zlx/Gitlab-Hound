{
  "name": "Gitlab-hound",
  "tagline": "Hound for Gitlab",
  "body": "Gitlab-Hound\r\n=====\r\n\r\nGitlab-Hound reviews Gitlab Merge Request for style guide violations.\r\n\r\nUsage\r\n--------\r\n\r\n1. `cp config/secrets.yml.example config/secrets.yml` and change\r\n3. `cp config/database.yml.example config/database.yml` and change\r\n4. `bundle install & bundle exec rake db:setup`\r\n5. `bin/rails s`\r\n6. `bundle exec sidekiq -C config/sidekiq.yml`\r\n\r\nRead [gitlab-hound 发布了](http://blog.zlxstar.me/blog/2014/10/02/gitlabhound-di-yi-ban-shang-xian-le/) for more detail \r\n\r\nLanguage Support\r\n-------------\r\n\r\n+ Ruby\r\n+ JavaScript\r\n+ CoffeeScript\r\n+ Java\r\n\r\n\r\nCustom Style\r\n-----------\r\n\r\n### Ruby\r\n\r\nTo enable Ruby style checking, add the following to .hound.yml in the root of your project\r\n\r\n```\r\nruby:\r\n  enabled: true\r\n```\r\n\r\nWe uses [RUBOCOP](https://github.com/bbatsov/rubocop) internally so you can configure Gitlab-Hound by adding a [RUBOCOP CONFIG](https://github.com/bbatsov/rubocop/blob/master/config/enabled.yml) to your project and adding the following to .hound.yml in the root of your project.\r\n\r\n```\r\nruby:\r\n  enabled: true\r\n  config_file: config/.rubocop.yml\r\n```\r\n\r\n\r\n### CoffeeScript\r\n\r\nTo enable CoffeeScript style checking, add the following to .hound.yml in the root of your project\r\n\r\n```\r\ncoffee_script:\r\n  enabled: true\r\n```\r\n\r\nWe use [COFFEELINT](http://www.coffeelint.org/) internally so you can configure Gitlab-Hound by adding a [COFFEELINT CONFIG](https://github.com/clutchski/coffeelint/blob/master/coffeelint.json) to your project and adding the following to .hound.yml in the root of your project.\r\n\r\n```\r\ncoffee_script:\r\n  enabled: true\r\n  config_file: config/.coffeelint.json\r\n```\r\n\r\n### JavaScript\r\n\r\nTo enable JavaScript style checking, add the following to .hound.yml in the root of your project\r\n\r\n```\r\njava_script:\r\n  enabled: true\r\n```\r\n\r\nWe use [JSHINT](https://github.com/jshint/jshint/) internally so you can configure Gitlab-Hound by adding a [JSHINT CONFIG](https://github.com/zlx/Gitlab-Hound/blob/master/config/style_guides/javascript.json) to your project and adding the following to .hound.yml in the root of your project.\r\n\r\n```\r\njava_script:\r\n  enabled: true\r\n  config_file: config/.jshint.json\r\n```\r\n\r\n### Java\r\n\r\nTo enable Java style checking, add the following to .hound.yml in the root of your project\r\n\r\n```\r\njava:\r\n  enabled: true\r\n```\r\n\r\nWe use [check styles](https://github.com/checkstyle/checkstyle) internally so you can configure Gitlab-Hound by [custom config](https://github.com/zlx/jlint/blob/master/doc/sun_checks.xml) to your project and adding the following to .hound.yml in the root of your project.\r\n\r\n```\r\njava:\r\n  enabled: true\r\n  config_file: config/.java_custom.xml\r\n```\r\n\r\nDefault we use [sun checks](https://github.com/zlx/jlint/blob/master/doc/sun_checks.xml) for style checking, you can download google checks or sun checks from [here](https://github.com/zlx/jlint/tree/master/doc), and change them according to your team [check style checks](http://checkstyle.sourceforge.net/checks.html)\r\n\r\nContributing\r\n------------\r\n\r\nFirst, thank you for contributing!\r\n\r\nHere a few guidelines to follow:\r\n\r\n1. Write tests\r\n2. Make sure the entire test suite passes locally\r\n3. Open a pull request on GitHub\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}